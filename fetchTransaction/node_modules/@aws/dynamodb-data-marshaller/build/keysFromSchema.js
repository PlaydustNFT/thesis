"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
function keysFromSchema(schema) {
    var e_1, _a, e_2, _b;
    var attributes = {};
    var tableKeys = {};
    var indexKeys = {};
    try {
        for (var _c = tslib_1.__values(Object.keys(schema)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var propertyName = _d.value;
            var fieldSchema = schema[propertyName];
            if (fieldSchema.type === 'Binary' ||
                fieldSchema.type === 'Custom' ||
                fieldSchema.type === 'Date' ||
                fieldSchema.type === 'Number' ||
                fieldSchema.type === 'String') {
                var _e = fieldSchema.attributeName, attributeName = _e === void 0 ? propertyName : _e;
                if (fieldSchema.keyType) {
                    attributes[attributeName] = attributeType(fieldSchema);
                    tableKeys[attributeName] = fieldSchema.keyType;
                }
                if (fieldSchema.indexKeyConfigurations &&
                    Object.keys(fieldSchema.indexKeyConfigurations).length > 0) {
                    attributes[attributeName] = attributeType(fieldSchema);
                    try {
                        for (var _f = tslib_1.__values(Object.keys(fieldSchema.indexKeyConfigurations)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var indexName = _g.value;
                            if (!(indexName in indexKeys)) {
                                indexKeys[indexName] = {};
                            }
                            indexKeys[indexName][attributeName]
                                = fieldSchema.indexKeyConfigurations[indexName];
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return { attributes: attributes, tableKeys: tableKeys, indexKeys: indexKeys };
}
exports.keysFromSchema = keysFromSchema;
function attributeType(fieldSchema) {
    switch (fieldSchema.type) {
        case 'Binary':
            return 'B';
        case 'Custom':
            if (!fieldSchema.attributeType) {
                throw new Error('Invalid schema: no attribute type defined for custom field');
            }
            return fieldSchema.attributeType;
        case 'Date':
        case 'Number':
            return 'N';
        case 'String':
            return 'S';
    }
}
//# sourceMappingURL=keysFromSchema.js.map