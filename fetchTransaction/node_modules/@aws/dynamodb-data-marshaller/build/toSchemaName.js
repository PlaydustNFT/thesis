"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var dynamodb_expressions_1 = require("@aws/dynamodb-expressions");
function toSchemaName(path, schema) {
    var e_1, _a;
    if (typeof path === 'string') {
        path = new dynamodb_expressions_1.AttributePath(path);
    }
    var elements = path.elements.map(function (el) { return (tslib_1.__assign({}, el)); });
    var cursor = {
        type: 'Document',
        members: schema
    };
    try {
        for (var elements_1 = tslib_1.__values(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {
            var element = elements_1_1.value;
            if (element.type === 'AttributeName' &&
                cursor &&
                cursor.type === 'Document') {
                var name = element.name;
                element.name = getSchemaName(name, cursor.members);
                cursor = cursor.members[name];
            }
            else if (element.type === 'ListIndex' &&
                cursor &&
                cursor.type === 'List') {
                cursor = cursor.memberType;
            }
            else {
                break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (elements_1_1 && !elements_1_1.done && (_a = elements_1.return)) _a.call(elements_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return new dynamodb_expressions_1.AttributePath(elements);
}
exports.toSchemaName = toSchemaName;
function getSchemaName(propertyName, schema) {
    var fieldSchema = schema[propertyName];
    if (fieldSchema) {
        var _a = fieldSchema.attributeName, attributeName = _a === void 0 ? propertyName : _a;
        return attributeName;
    }
    return propertyName;
}
exports.getSchemaName = getSchemaName;
//# sourceMappingURL=toSchemaName.js.map