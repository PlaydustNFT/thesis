"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bytes = require('utf8-bytes');
/**
 * @internal
 */
function itemIdentifier(tableName, _a) {
    var DeleteRequest = _a.DeleteRequest, PutRequest = _a.PutRequest;
    if (DeleteRequest) {
        return tableName + "::delete::" + serializeKeyTypeAttributes(DeleteRequest.Key);
    }
    else if (PutRequest) {
        return tableName + "::put::" + serializeKeyTypeAttributes(PutRequest.Item);
    }
    throw new Error("Invalid write request provided");
}
exports.itemIdentifier = itemIdentifier;
function serializeKeyTypeAttributes(attributes) {
    var e_1, _a;
    var keyTypeProperties = [];
    try {
        for (var _b = tslib_1.__values(Object.keys(attributes).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var property = _c.value;
            var attribute = attributes[property];
            if (attribute.B) {
                keyTypeProperties.push(property + "=" + toByteArray(attribute.B));
            }
            else if (attribute.N) {
                keyTypeProperties.push(property + "=" + attribute.N);
            }
            else if (attribute.S) {
                keyTypeProperties.push(property + "=" + attribute.S);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return keyTypeProperties.join('&');
}
function toByteArray(value) {
    if (ArrayBuffer.isView(value)) {
        return new Uint8Array(value.buffer, value.byteOffset, value.byteLength);
    }
    if (typeof value === 'string') {
        return Uint8Array.from(bytes(value));
    }
    if (isArrayBuffer(value)) {
        return new Uint8Array(value);
    }
    throw new Error('Unrecognized binary type');
}
function isArrayBuffer(arg) {
    return (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||
        Object.prototype.toString.call(arg) === '[object ArrayBuffer]';
}
//# sourceMappingURL=itemIdentifier.js.map