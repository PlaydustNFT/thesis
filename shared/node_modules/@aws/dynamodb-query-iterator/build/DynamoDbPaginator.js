"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeConsumedCapacities_1 = require("./mergeConsumedCapacities");
if (Symbol && !Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol.for("__@@asyncIterator__");
}
var DynamoDbPaginator = /** @class */ (function () {
    function DynamoDbPaginator(limit) {
        this.limit = limit;
        this._count = 0;
        this._scannedCount = 0;
        this.lastResolved = Promise.resolve();
    }
    /**
     * @inheritDoc
     */
    DynamoDbPaginator.prototype[Symbol.asyncIterator] = function () {
        return this;
    };
    Object.defineProperty(DynamoDbPaginator.prototype, "consumedCapacity", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._consumedCapacity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamoDbPaginator.prototype, "count", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamoDbPaginator.prototype, "lastEvaluatedKey", {
        /**
         * Get the LastEvaluatedKey of the last result page yielded by this
         * paginator or undefined if the scan has already been exhausted.
         */
        get: function () {
            return this._lastKey;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    DynamoDbPaginator.prototype.next = function () {
        var _this = this;
        this.lastResolved = this.lastResolved.then(function () {
            if (_this.count >= (_this.limit === undefined ? Infinity : _this.limit)) {
                return { done: true };
            }
            return _this.getNext().then(function (_a) {
                var done = _a.done, value = _a.value;
                if (value && !done) {
                    _this._lastKey = value.LastEvaluatedKey;
                    _this._count += (value.Items || []).length;
                    _this._scannedCount += (value.ScannedCount || 0);
                    _this._consumedCapacity = mergeConsumedCapacities_1.mergeConsumedCapacities(_this._consumedCapacity, value.ConsumedCapacity);
                }
                return { value: value, done: done };
            });
        });
        return this.lastResolved;
    };
    /**
     * @inheritDoc
     */
    DynamoDbPaginator.prototype.return = function () {
        // Prevent any further use of this iterator
        this.lastResolved = Promise.reject(new Error('Iteration has been manually interrupted and may not be resumed'));
        this.lastResolved.catch(function () { });
        return Promise.resolve({ done: true });
    };
    Object.defineProperty(DynamoDbPaginator.prototype, "scannedCount", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._scannedCount;
        },
        enumerable: true,
        configurable: true
    });
    DynamoDbPaginator.prototype.getNextPageSize = function (requestedPageSize) {
        if (this.limit === undefined) {
            return requestedPageSize;
        }
        return Math.min(requestedPageSize === undefined ? Infinity : requestedPageSize, this.limit - this.count);
    };
    return DynamoDbPaginator;
}());
exports.DynamoDbPaginator = DynamoDbPaginator;
//# sourceMappingURL=DynamoDbPaginator.js.map