import { DynamoDbPaginatorInterface } from './DynamoDbPaginatorInterface';
import { AttributeMap, ConsumedCapacity } from 'aws-sdk/clients/dynamodb';
export declare abstract class ItemIterator<Paginator extends DynamoDbPaginatorInterface> implements AsyncIterableIterator<AttributeMap> {
    private readonly paginator;
    private _iteratedCount;
    private lastResolved;
    private readonly pending;
    protected constructor(paginator: Paginator);
    /**
     * @inheritDoc
     */
    [Symbol.asyncIterator](): AsyncIterableIterator<AttributeMap>;
    /**
     * The capacity units consumed by the Scan operation. The data returned
     * includes the total provisioned throughput consumed, along with statistics
     * for the table and any indexes involved in the operation. ConsumedCapacity
     * is only returned if the ReturnConsumedCapacity parameter was specified.
     */
    readonly consumedCapacity: ConsumedCapacity | undefined;
    /**
     * The number of items that have been iterated over.
     */
    readonly count: number;
    /**
     * @inheritDoc
     */
    next(): Promise<IteratorResult<AttributeMap>>;
    /**
     * Detaches the underlying paginator from this iterator and returns it. The
     * paginator will yield arrays of unmarshalled items, with each yielded
     * array corresponding to a single call to the underlying API. As with the
     * underlying API, pages may contain a variable number of items or no items,
     * in which case an empty array will be yielded.
     *
     * Calling this method will disable further iteration.
     */
    pages(): Paginator;
    /**
     * @inheritDoc
     */
    return(): Promise<IteratorResult<AttributeMap>>;
    /**
     * The number of items evaluated, before any ScanFilter is applied. A high
     * scannedCount value with few, or no, Count results indicates an
     * inefficient Scan operation. For more information, see Count and
     * ScannedCount in the Amazon DynamoDB Developer Guide.
     */
    readonly scannedCount: number;
    private getNext;
}
