import { BatchState, SyncOrAsyncIterable, TableState, TableStateElement } from './types';
import DynamoDB = require('aws-sdk/clients/dynamodb');
export declare abstract class BatchOperation<Element extends TableStateElement> implements AsyncIterableIterator<[string, Element]> {
    protected readonly client: DynamoDB;
    /**
     * The maximum number of elements that may be included in a single batch.
     */
    protected abstract readonly batchSize: number;
    /**
     * Items that have been retrieved and are ready to be returned.
     */
    protected readonly pending: Array<[string, Element]>;
    /**
     * A mapping of table names to table-specific operation state (e.g., the
     * number of throttling events experienced, etc.)
     */
    protected readonly state: BatchState<Element>;
    /**
     * Input elements that are prepared for immediate dispatch
     */
    protected readonly toSend: Array<[string, Element]>;
    private readonly throttled;
    private readonly iterator;
    private sourceDone;
    private sourceNext;
    private lastResolved?;
    /**
     * @param client    The AWS SDK client with which to communicate with
     *                  DynamoDB.
     * @param items     A synchronous or asynchronous iterable of tuples
     *                  describing the operations to execute. The first member
     *                  of the tuple should be the name of the table targeted by
     *                  the operation.
     */
    constructor(client: DynamoDB, items: SyncOrAsyncIterable<[string, Element]>);
    next(): Promise<IteratorResult<[string, Element]>>;
    [Symbol.asyncIterator](): this;
    /**
     * Execute a single batch request and process the result.
     */
    protected abstract doBatchRequest(): Promise<void>;
    /**
     * Create and return the initial state object for a given DynamoDB table.
     *
     * @param tableName The name of the table whose initial state should be
     *                  returned.
     */
    protected getInitialTableState(tableName: string): TableState<Element>;
    /**
     * Accept an array of unprocessed items belonging to a single table and
     * re-enqueue it for submission, making sure the appropriate level of
     * backoff is applied to future operations on the same table.
     *
     * @param tableName     The table to which the unprocessed elements belong.
     * @param unprocessed   Elements returned by DynamoDB as not yet processed.
     *                      The elements should not be unmarshalled, but they
     *                      should be reverted to the form used for elements
     *                      that have not yet been sent.
     */
    protected handleThrottled(tableName: string, unprocessed: Array<Element>): void;
    /**
     * Iterate over all pending writes and move those targeting throttled tables
     * into the throttled queue.
     *
     * @param unprocessedTables     A set of tables for which some items were
     *                              returned without being processed.
     */
    protected movePendingToThrottled(unprocessedTables: Set<string>): void;
    private addToSendQueue;
    private enqueueThrottled;
    private getNext;
    private refillPending;
}
