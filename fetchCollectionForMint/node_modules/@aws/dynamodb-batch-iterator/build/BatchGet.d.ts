import { BatchGetOptions } from './BatchGetOptions';
import { BatchOperation } from './BatchOperation';
import { SyncOrAsyncIterable, TableState } from './types';
import { AttributeMap } from 'aws-sdk/clients/dynamodb';
import DynamoDB = require('aws-sdk/clients/dynamodb');
export declare const MAX_READ_BATCH_SIZE = 100;
/**
 * Retrieves items from DynamoDB in batches of 100 or fewer via one or more
 * BatchGetItem operations. The items may be from any number of tables.
 *
 * This method will automatically retry any get requests returned by DynamoDB as
 * unprocessed. Exponential backoff on unprocessed items is employed on a
 * per-table basis.
 */
export declare class BatchGet extends BatchOperation<AttributeMap> {
    protected readonly batchSize: number;
    private readonly consistentRead?;
    private readonly options;
    /**
     * @param client    The AWS SDK client with which to communicate with
     *                  DynamoDB.
     * @param items     A synchronous or asynchronous iterable of tuples
     *                  describing the reads to execute. The first member of the
     *                  tuple should be the name of the table from which to
     *                  read, and the second should be the marshalled key.
     * @param options   Additional options to apply to the operations executed.
     */
    constructor(client: DynamoDB, items: SyncOrAsyncIterable<[string, AttributeMap]>, { ConsistentRead, PerTableOptions, }?: BatchGetOptions);
    protected doBatchRequest(): Promise<void>;
    protected getInitialTableState(tableName: string): TableState<AttributeMap>;
}
