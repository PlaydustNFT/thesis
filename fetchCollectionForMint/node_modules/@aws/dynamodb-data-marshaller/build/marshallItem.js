"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var InvalidValueError_1 = require("./InvalidValueError");
var InvalidSchemaError_1 = require("./InvalidSchemaError");
var dynamodb_auto_marshaller_1 = require("@aws/dynamodb-auto-marshaller");
var bytes = require('utf8-bytes');
/**
 * Converts a JavaScript object into a DynamoDB Item.
 *
 * @param schema Metadata explaining how the provided input is to be marshalled
 * @param input JavaScript object to convert
 */
function marshallItem(schema, input) {
    var e_1, _a;
    var marshalled = {};
    try {
        for (var _b = tslib_1.__values(Object.keys(schema)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var value = input[key];
            var _d = schema[key].attributeName, attributeName = _d === void 0 ? key : _d;
            var marshalledValue = marshallValue(schema[key], value);
            if (marshalledValue) {
                marshalled[attributeName] = marshalledValue;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return marshalled;
}
exports.marshallItem = marshallItem;
/**
 * Converts a value into a DynamoDB AttributeValue.
 *
 * @param schemaType    Metadata outlining how the value is to be understood and
 *                      converted
 * @param input         Value to convert
 */
function marshallValue(schemaType, input) {
    var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e, e_7, _f;
    if (input === undefined) {
        var defaultProvider = schemaType.defaultProvider;
        if (typeof defaultProvider === 'function') {
            input = defaultProvider();
        }
        else {
            return undefined;
        }
    }
    if (schemaType.type === 'Any') {
        var _g = schemaType.onEmpty, onEmpty = _g === void 0 ? 'nullify' : _g, _h = schemaType.onInvalid, onInvalid = _h === void 0 ? 'omit' : _h, _j = schemaType.unwrapNumbers, unwrapNumbers = _j === void 0 ? false : _j;
        var marshaller = new dynamodb_auto_marshaller_1.Marshaller({ onEmpty: onEmpty, onInvalid: onInvalid, unwrapNumbers: unwrapNumbers });
        return marshaller.marshallValue(input);
    }
    if (schemaType.type === 'Binary') {
        if (!input || input.length === 0 || input.byteLength === 0) {
            return { NULL: true };
        }
        return { B: marshallBinary(input) };
    }
    if (schemaType.type === 'Boolean') {
        return { BOOL: Boolean(input) };
    }
    if (schemaType.type === 'Custom') {
        return schemaType.marshall(input);
    }
    if (schemaType.type === 'Collection') {
        var _k = schemaType.onEmpty, onEmpty = _k === void 0 ? 'nullify' : _k, _l = schemaType.onInvalid, onInvalid = _l === void 0 ? 'omit' : _l, _m = schemaType.unwrapNumbers, unwrapNumbers = _m === void 0 ? false : _m;
        var marshaller = new dynamodb_auto_marshaller_1.Marshaller({ onEmpty: onEmpty, onInvalid: onInvalid, unwrapNumbers: unwrapNumbers });
        var collected = [];
        try {
            for (var input_1 = tslib_1.__values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var element = input_1_1.value;
                var marshalled = marshaller.marshallValue(element);
                if (marshalled) {
                    collected.push(marshalled);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return { L: collected };
    }
    if (schemaType.type === 'Date') {
        var date = void 0;
        if (typeof input === 'string') {
            date = new Date(input);
        }
        else if (typeof input === 'number') {
            date = new Date(input * 1000);
        }
        else if (isDate(input)) {
            date = input;
        }
        else {
            throw new InvalidValueError_1.InvalidValueError(input, 'Unable to convert value to date');
        }
        return { N: marshallNumber(Math.floor(date.valueOf() / 1000)) };
    }
    if (schemaType.type === 'Document') {
        return { M: marshallItem(schemaType.members, input) };
    }
    if (schemaType.type === 'Hash') {
        var _o = schemaType.onEmpty, onEmpty = _o === void 0 ? 'nullify' : _o, _p = schemaType.onInvalid, onInvalid = _p === void 0 ? 'omit' : _p, _q = schemaType.unwrapNumbers, unwrapNumbers = _q === void 0 ? false : _q;
        var marshaller = new dynamodb_auto_marshaller_1.Marshaller({ onEmpty: onEmpty, onInvalid: onInvalid, unwrapNumbers: unwrapNumbers });
        return { M: marshaller.marshallItem(input) };
    }
    if (schemaType.type === 'List') {
        var elements = [];
        try {
            for (var input_2 = tslib_1.__values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
                var member = input_2_1.value;
                var marshalled = marshallValue(schemaType.memberType, member);
                if (marshalled) {
                    elements.push(marshalled);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (input_2_1 && !input_2_1.done && (_b = input_2.return)) _b.call(input_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return { L: elements };
    }
    if (schemaType.type === 'Map') {
        var marshalled = {};
        if (typeof input[Symbol.iterator] === 'function') {
            try {
                for (var input_3 = tslib_1.__values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
                    var _r = tslib_1.__read(input_3_1.value, 2), key = _r[0], value = _r[1];
                    var marshalledValue = marshallValue(schemaType.memberType, value);
                    if (marshalledValue) {
                        marshalled[key] = marshalledValue;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (input_3_1 && !input_3_1.done && (_c = input_3.return)) _c.call(input_3);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        else if (typeof input === 'object') {
            try {
                for (var _s = tslib_1.__values(Object.keys(input)), _t = _s.next(); !_t.done; _t = _s.next()) {
                    var key = _t.value;
                    var marshalledValue = marshallValue(schemaType.memberType, input[key]);
                    if (marshalledValue) {
                        marshalled[key] = marshalledValue;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_t && !_t.done && (_d = _s.return)) _d.call(_s);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            throw new InvalidValueError_1.InvalidValueError(input, 'Unable to convert value to map');
        }
        return { M: marshalled };
    }
    if (schemaType.type === 'Null') {
        return { NULL: true };
    }
    if (schemaType.type === 'Number') {
        return { N: marshallNumber(input) };
    }
    if (schemaType.type === 'Set') {
        if (schemaType.memberType === 'Binary') {
            if (!(input instanceof dynamodb_auto_marshaller_1.BinarySet)) {
                var set = new dynamodb_auto_marshaller_1.BinarySet();
                try {
                    for (var input_4 = tslib_1.__values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
                        var item = input_4_1.value;
                        set.add(marshallBinary(item));
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (input_4_1 && !input_4_1.done && (_e = input_4.return)) _e.call(input_4);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                input = set;
            }
            return marshallSet(input, marshallBinary, function (bin) { return bin.byteLength === 0; }, 'BS');
        }
        if (schemaType.memberType === 'Number') {
            if (!(input instanceof Set)) {
                input = new dynamodb_auto_marshaller_1.NumberValueSet(input);
            }
            return marshallSet(input, marshallNumber, function () { return false; }, 'NS');
        }
        if (schemaType.memberType === 'String') {
            if (!(input instanceof Set)) {
                var original = input;
                input = new Set();
                try {
                    for (var original_1 = tslib_1.__values(original), original_1_1 = original_1.next(); !original_1_1.done; original_1_1 = original_1.next()) {
                        var el = original_1_1.value;
                        input.add(el);
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (original_1_1 && !original_1_1.done && (_f = original_1.return)) _f.call(original_1);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
            return marshallSet(input, marshallString, function (string) { return string.length === 0; }, 'SS');
        }
        throw new InvalidSchemaError_1.InvalidSchemaError(schemaType, "Unrecognized set member type: " + schemaType.memberType);
    }
    if (schemaType.type === 'String') {
        var string = marshallString(input);
        if (string.length === 0) {
            return { NULL: true };
        }
        return { S: string };
    }
    if (schemaType.type === 'Tuple') {
        return {
            L: schemaType.members
                .map(function (type, index) { return marshallValue(type, input[index]); })
                .filter(function (val) { return val !== undefined; })
        };
    }
    throw new InvalidSchemaError_1.InvalidSchemaError(schemaType, 'Unrecognized schema node');
}
exports.marshallValue = marshallValue;
function marshallBinary(input) {
    if (ArrayBuffer.isView(input)) {
        return new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
    }
    if (isArrayBuffer(input)) {
        return new Uint8Array(input);
    }
    return Uint8Array.from(bytes(input));
}
function marshallNumber(input) {
    return input.toString(10);
}
function marshallString(input) {
    return input.toString();
}
function marshallSet(value, marshaller, isEmpty, setTag) {
    var e_8, _a, _b;
    var collected = [];
    try {
        for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
            var member = value_1_1.value;
            var marshalled = marshaller(member);
            if (isEmpty(marshalled)) {
                // DynamoDB sets cannot contain empty values
                continue;
            }
            collected.push(marshalled);
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
        }
        finally { if (e_8) throw e_8.error; }
    }
    if (collected.length === 0) {
        return { NULL: true };
    }
    return _b = {}, _b[setTag] = collected, _b;
}
function isArrayBuffer(arg) {
    return typeof ArrayBuffer === 'function'
        && (arg instanceof ArrayBuffer ||
            Object.prototype.toString.call(arg) === '[object ArrayBuffer]');
}
function isDate(arg) {
    return arg instanceof Date
        || Object.prototype.toString.call(arg) === '[object Date]';
}
//# sourceMappingURL=marshallItem.js.map