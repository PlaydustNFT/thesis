"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var InvalidSchemaError_1 = require("./InvalidSchemaError");
var dynamodb_auto_marshaller_1 = require("@aws/dynamodb-auto-marshaller");
/**
 * Unmarshall a DynamoDB item into a JavaScript value.
 *
 * @param schema            Metadata outlining the types to be expected
 *                          throughout the input
 * @param input             The value to unmarshall
 * @param valueConstructor  A zero-argument constructor used to create the
 *                          object onto which the input should be unmarshalled
 */
function unmarshallItem(schema, input, valueConstructor) {
    var e_1, _a;
    var unmarshalled = valueConstructor
        ? new valueConstructor()
        : Object.create(null);
    try {
        for (var _b = tslib_1.__values(Object.keys(schema)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var _d = schema[key].attributeName, attributeName = _d === void 0 ? key : _d;
            if (attributeName in input) {
                unmarshalled[key] = unmarshallValue(schema[key], input[attributeName]);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return unmarshalled;
}
exports.unmarshallItem = unmarshallItem;
function unmarshallValue(schemaType, input) {
    switch (schemaType.type) {
        case 'Any':
        case 'Collection':
        case 'Hash':
            var autoMarshaller = new dynamodb_auto_marshaller_1.Marshaller();
            return autoMarshaller.unmarshallValue(input);
        case 'Binary':
            if (input.NULL) {
                return new Uint8Array(0);
            }
            return input.B;
        case 'Boolean':
            return input.BOOL;
        case 'Custom':
            return schemaType.unmarshall(input);
        case 'Date':
            return input.N ? new Date(Number(input.N) * 1000) : undefined;
        case 'Document':
            return input.M
                ? unmarshallItem(schemaType.members, input.M, schemaType.valueConstructor) : undefined;
        case 'List':
            return input.L ? unmarshallList(schemaType, input.L) : undefined;
        case 'Map':
            return input.M ? unmarshallMap(schemaType, input.M) : undefined;
        case 'Null':
            return input.NULL ? null : undefined;
        case 'Number':
            return typeof input.N === 'string' ? Number(input.N) : undefined;
        case 'Set':
            switch (schemaType.memberType) {
                case 'Binary':
                    if (input.NULL) {
                        return new dynamodb_auto_marshaller_1.BinarySet();
                    }
                    return typeof input.BS !== 'undefined'
                        ? new dynamodb_auto_marshaller_1.BinarySet(input.BS)
                        : undefined;
                case 'Number':
                    if (input.NULL) {
                        return new Set();
                    }
                    return input.NS ? unmarshallNumberSet(input.NS) : undefined;
                case 'String':
                    if (input.NULL) {
                        return new Set();
                    }
                    return input.SS ? unmarshallStringSet(input.SS) : undefined;
                default:
                    throw new InvalidSchemaError_1.InvalidSchemaError(schemaType, "Unrecognized set member type: " + schemaType.memberType);
            }
        case 'String':
            return input.NULL ? '' : input.S;
        case 'Tuple':
            return input.L ? unmarshallTuple(schemaType, input.L) : undefined;
    }
    throw new InvalidSchemaError_1.InvalidSchemaError(schemaType, 'Unrecognized schema node');
}
function unmarshallList(schemaType, input) {
    var e_2, _a;
    var list = [];
    try {
        for (var input_1 = tslib_1.__values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var element = input_1_1.value;
            list.push(unmarshallValue(schemaType.memberType, element));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return list;
}
function unmarshallMap(schemaType, input) {
    var e_3, _a;
    var map = new Map();
    try {
        for (var _b = tslib_1.__values(Object.keys(input)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            map.set(key, unmarshallValue(schemaType.memberType, input[key]));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return map;
}
function unmarshallNumberSet(input) {
    var e_4, _a;
    var set = new Set();
    try {
        for (var input_2 = tslib_1.__values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var number = input_2_1.value;
            set.add(Number(number));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return set;
}
function unmarshallStringSet(input) {
    var e_5, _a;
    var set = new Set();
    try {
        for (var input_3 = tslib_1.__values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
            var string = input_3_1.value;
            set.add(string);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (input_3_1 && !input_3_1.done && (_a = input_3.return)) _a.call(input_3);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return set;
}
function unmarshallTuple(schemaType, input) {
    var members = schemaType.members;
    var tuple = [];
    for (var i = 0; i < members.length; i++) {
        tuple.push(unmarshallValue(members[i], input[i]));
    }
    return tuple;
}
//# sourceMappingURL=unmarshallItem.js.map